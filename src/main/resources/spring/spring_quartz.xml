<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<context:component-scan base-package="com.cdkj">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			
			    <!-- 币种+汇率 -->
			    <!-- <ref bean="currencyRateTrigger"/>-->
				<!-- <ref bean="coinTrigger"/> -->
			    
			    <!-- 行情 -->
				<!-- <ref bean="huobiProMarketTrigger"/>-->
				<!-- <ref bean="marketGlobalTrigger"/> -->
				
				<!-- 模拟交易 -->
       		    <!-- <ref bean="doCheckDealTrigger"/> -->
       		    <!-- <ref bean="doRefreshDayMarketAmountTrigger"/> -->
       		    
			</list>
		</property>
		<property name="autoStartup" value="true" />
	</bean>
	
	
	<!-- 定时获取汇率 -->
	<!-- <bean id="currencyRateTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="currencyRate" />

		每30分钟 获取一次
		<property name="cronExpression" value="0 */30 * * * ?" />
	</bean>
	
	<bean id="currencyRate"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="currencyRateAOImpl" />
		<property name="targetMethod" value="obtainCurrencyRate" />
		<property name="concurrent" value="false" />
		是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程
	</bean> -->

	<!-- 定时获取全局行情 -->
	<!-- <bean id="marketGlobalTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="marketGlobal" />
		每15秒 获取一次
		<property name="cronExpression" value="0 */2 * * * ?" />
	</bean>
	
	<bean id="marketGlobal"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="marketGlobalAOImpl" />
		<property name="targetMethod" value="obtainExchangeMarket" />
		<property name="concurrent" value="false" />
		是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程
	</bean>
 -->
	<!-- 定时获取火币Pro行情 -->
	<!-- <bean id="huobiProMarketTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doObtainLastestMarket" />
		每30秒 获取一次
		<property name="cronExpression" value="*/30 * * * * ?" />
	</bean>
	
	<bean id="doObtainLastestMarket"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="marketHuobiproLogAOImpl" />
		<property name="targetMethod" value="doObtainLastestMarket" />
		<property name="concurrent" value="false" />
		是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程
	</bean> -->
	
	<!-- 定时获取币种均价 -->
	<!-- <bean id="coinTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="coin" />
		每30秒 获取一次
		<property name="cronExpression" value="*/30 * * * * ?" />
	</bean>
	
	<bean id="coin"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="coinAOImpl" />
		<property name="targetMethod" value="obtainMarketDetailList" />
		<property name="concurrent" value="false" />
		是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程
	</bean> -->
	
	<!-- 定时检查委托单成交 -->
	<bean id="doCheckDealTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doCheckDeal" />
		<property name="cronExpression" value="0/15 * * * * ?" />
	</bean>
	
	<bean id="doCheckDeal"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="simuOrderAOImpl" />
		<property name="targetMethod" value="doCheckDeal" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	
	<!-- 定时刷新火币交易对的价格 -->
	<bean id="huobiPairPriceTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doCheckDeal" />
		<property name="cronExpression" value="0/59 * * * * ?" />
	</bean>
	
	<bean id="huobiPairPrice"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="exchangePairAOImpl" />
		<property name="targetMethod" value="doRefreshExchangePairPrice" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	
	<!-- 每日凌晨更新账户总市值 -->
	<!-- <bean id="doRefreshDayMarketAmountTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doRefreshDayMarketAmount" />
		<property name="cronExpression" value="0 0 0 * * ?" />
	</bean>
	
	<bean id="doRefreshDayMarketAmount"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="simuAccountAOImpl" />
		<property name="targetMethod" value="doRefreshDayMarketAmount" />
		<property name="concurrent" value="false" />
		是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程
	</bean> -->
	
</beans>
