<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<context:component-scan base-package="com.cdkj">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			
				<!-- 行情 -->
       		    <!-- <ref bean="marketTrigger"/> -->
       		    
       		    <!-- 币币交易 -->
				<ref bean="doScanSimuOrderTrigger"/>
       		    <ref bean="doSaveKLineTrigger"/>
       		    
       		    <!-- 归集相关定时器 -->
				<!-- <ref bean="doCollectTrigger" /> -->
				<!-- 取现相关定时器 -->
				<!-- <ref bean="doWithDrawTrigger" /> -->
			</list>
		</property>
		<property name="autoStartup" value="true" />
	</bean>

	<!-- 定时获取行情 -->
	<bean id="marketTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="market" />
		<property name="cronExpression" value="*/30 * * * * ?" />
	</bean>
	<bean id="market"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="marketAOImpl" />
		<property name="targetMethod" value="obtainMarket" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>	

	<!-- 扫描委托单 -->
	<bean id="doScanSimuOrderTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doScanSimuOrder" />
		<property name="cronExpression" value="0/5 * * * * ?" />
	</bean>
	
	<bean id="doScanSimuOrder"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="simuOrderAOImpl" />
		<property name="targetMethod" value="scanSimuOrder" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>	
	
	<!-- 落地行情K线 -->
	<bean id="doSaveKLineTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doSaveKLine" />
		<property name="cronExpression" value="0 0/1 * * * ?" />
	</bean>
	
	<bean id="doSaveKLine"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="simuKLineAOImpl" />
		<property name="targetMethod" value="saveKLine" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>	
	
	<!-- 扫描存活撮合结果 --><!-- 
	<bean id="doScanMatchResultTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doScanMatchResult" />
		<property name="cronExpression" value="0/1 * * * * ?" />
	</bean>
	
	<bean id="doScanMatchResult"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="simuMatchResultAOImpl" />
		<property name="targetMethod" value="doCheckMatchResult" />
		<property name="concurrent" value="false" />
		是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程
	</bean>	 -->
	
	<!-- 定时扫描归集相关操作 -->
	<bean id="doCollectTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doCollect" />
		<property name="cronExpression" value="0 */1 * * * ?"/><!-- 每分钟执行 -->
	</bean>
	<bean id="doCollect"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="collectAOImpl" />
		<property name="targetMethod" value="doCollect" />
		<property name="concurrent" value="false" />
	</bean>
	
	<!-- 定时取现相关操作 -->
	<bean id="doWithDrawTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="doWithDraw" />
		<property name="cronExpression" value="0 */1 * * * ?"/><!-- 每分钟执行 -->
	</bean>
	<bean id="doWithDraw"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="withdrawAOImpl" />
		<property name="targetMethod" value="doWithDraw" />
		<property name="concurrent" value="false" />
	</bean>
</beans>
