<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ogc.standard.dao.ICollectDAO">
	<resultMap id="collect_DB_Result" type="collect">
		<result column="code" property="code" />
		<result column="currency" property="currency" />
		<result column="from_address" property="fromAddress" />
		<result column="to_address" property="toAddress" />
		<result column="amount" property="amount" />
		
		<result column="tx_hash" property="txHash" />
		<result column="tx_fee" property="txFee" />
		<result column="status" property="status" />
		<result column="create_datetime" property="createDatetime" />
		<result column="confirm_datetime" property="confirmDatetime" />
		
		<result column="finish_datetime" property="finishDatetime" />
		<result column="ref_no" property="refNo" />
		<result column="coin_type" property="coinType" />
		<result column="pre_from" property="preFrom" />
		<result column="pre_to" property="preTo" />
		
		<result column="pre_amount" property="preAmount" />
		<result column="pre_tx_hash" property="preTxHash" />
		<result column="pre_tx_fee" property="preTxFee" />
		<result column="pre_create_datetime" property="preCreateDatetime" />
		<result column="pre_confirm_datetime" property="preConfirmDatetime" />
		
		<result column="remark" property="remark" />
		
	</resultMap>
	
	<resultMap id="addressUseInfo_DB_Result" type="ethXAddress">
		<result column="use_count" property="useCount" />
		<result column="use_amount" property="useAmount" />
	</resultMap>
	
	<sql id="where_condition">
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="code != null and code != '' ">
				AND t.code = #{code}
			</if>
			<if test="currency != null and currency != '' ">
				AND t.currency = #{currency}
			</if>
			<if test="codeForQuery != null and codeForQuery != '' ">
				AND t.code like "%"#{codeForQuery}"%"
			</if>
			<if test="txHash != null and txHash != '' ">
				AND t.tx_hash = #{txHash}
			</if>
			<if test="fromAddress != null and fromAddress != '' ">
				AND t.from_address = #{fromAddress}
			</if>
			<if test="toAddress != null and toAddress != '' ">
				AND t.to_address = #{toAddress}
			</if>
			<if test="status != null and status != '' ">
				AND t.status = #{status}
			</if>
			<if test="refNo != null and refNo != '' ">
				AND t.ref_no = #{refNo}
			</if>
			<if test="coinType != null and coinType != '' ">
				AND t.coin_type = #{coinType}
			</if>
		</trim>
	</sql>
	<select id="select_collect" parameterType="collect" resultMap="collect_DB_Result">
		SELECT
		t.code
		,t.currency
		,t.from_address
		,t.to_address
		,t.amount
		
		,t.tx_hash
		,t.tx_fee
		,t.status
		,t.create_datetime
		,t.confirm_datetime
		
		,t.finish_datetime
		,t.ref_no
		,t.coin_type
		,t.pre_from
		,t.pre_to
		
		,t.pre_amount
		,t.pre_tx_hash
		,t.pre_tx_fee
		,t.pre_create_datetime
		,t.pre_confirm_datetime
		
		,t.remark
		FROM
		tstd_collect t
		<include refid="where_condition" />
		<trim prefix="ORDER BY ">
			<if test="order != null and order != '' ">
				t.${order}
			</if>
		</trim>
	</select>

	<select id="select_collect_count" parameterType="collect"
		resultType="java.lang.Long">
		SELECT count(1) FROM tstd_collect t
		<include refid="where_condition" />
	</select>

	<insert id="insert_collect" parameterType="collect">
		INSERT INTO
		tstd_collect(
		code
		,currency
		,from_address
		,to_address
		,amount
		,tx_hash
		,tx_fee
		,status
		,create_datetime
		,confirm_datetime
		,finish_datetime
		,ref_no
		,coin_type
		)
		VALUES(
		#{code}
		,#{currency}
		,#{fromAddress}
		,#{toAddress}
		,#{amount}
		,#{txHash}
		,#{txFee}
		,#{status}
		,#{createDatetime}
		,#{confirmDatetime}
		,#{finishDatetime}
		,#{refNo}
		,#{coinType}
		)
	</insert>

	<insert id="insert_collect_list" parameterType="List">
	
		INSERT INTO
		tstd_collect(
		code
		,currency
		,from_address
		,to_address
		,status
		,coin_type
		,remark
		,ref_no
		)
		
		VALUES
		
		<foreach collection="list" item="collect" separator=",">
		(
		#{collect.code}
		,#{collect.currency}
		,#{collect.fromAddress}
		,#{collect.toAddress}
		,#{collect.status}
		,#{collect.coinType}
		,#{collect.remark}
		,#{collect.refNo}
		)
		</foreach>
		
	</insert>

	<update id="update_notice_eth" parameterType="collect">
		UPDATE
		tstd_collect
		SET
		tx_fee = #{txFee}
		,status = #{status}
		,confirm_datetime = #{confirmDatetime}
		,finish_datetime = #{finishDatetime}
		WHERE code = #{code}
	</update>
	
	<update id="update_notice_wan" parameterType="collect">
		UPDATE
		tstd_collect
		SET
		tx_fee = #{txFee}
		,status = #{status}
		,confirm_datetime = #{confirmDatetime}
		,finish_datetime = #{finishDatetime}
		WHERE code = #{code}
	</update>
	
	<update id="update_notice_btc" parameterType="collect">
		UPDATE
		tstd_collect
		SET
		tx_fee = #{txFee}
		,status = #{status}
		,confirm_datetime = #{confirmDatetime}
		,finish_datetime = #{finishDatetime}
		WHERE code = #{code}
	</update>
	
	<update id="update_notice_sc" parameterType="collect">
		UPDATE
		tstd_collect
		SET
		tx_fee = #{txFee}
		,from_address = #{fromAddress}
		,status = #{status}
		,confirm_datetime = #{confirmDatetime}
		,finish_datetime = #{finishDatetime}
		WHERE code = #{code}
	</update>

	<select id="select_addressUseInfo" parameterType="collect"
		resultMap="addressUseInfo_DB_Result">
		SELECT 
		COUNT(*) as use_count, 
		COALESCE(SUM(amount),0) as use_amount
		FROM tstd_collect t
		<include refid="where_condition" />
	</select>
	
	<select id="select_totalCollect" parameterType="collect"
		resultType="java.math.BigDecimal">
		SELECT COALESCE(SUM(amount),0) FROM tstd_collect t
		<include refid="where_condition" />
	</select>
	
	<update id="update_collectFeeBroadcastSuccess" parameterType="collection">
		UPDATE
		tstd_collect
		SET
		pre_from = #{preFrom}
		,pre_to = #{preTo}
		,pre_amount = #{preAmount}
		,pre_tx_hash = #{preTxHash}
		,pre_create_datetime = #{preCreateDatetime}
		,status = #{status}
		,remark = #{remark}
		WHERE code = #{code}
	</update>
	
	<update id="update_collectBroadcastSuccess" parameterType="collection">
		UPDATE
		tstd_collect
		SET
		amount = #{amount}
		,tx_hash = #{txHash}
		,create_datetime = #{createDatetime}
		,status = #{status}
		,remark = #{remark}
		WHERE code = #{code}
	</update>
	
	<update id="update_collectFailed" parameterType="collect">
		UPDATE
		tstd_collect
		SET
		status = #{status}
		,remark = #{remark}
		WHERE code = #{code}
	</update>
	
	<update id="update_collectFeeTxSuccess" parameterType="collect">
		UPDATE
		tstd_collect
		SET
		pre_tx_fee = #{preTxFee}
		,pre_confirm_datetime = #{preConfirmDatetime}
		,status = #{status}
		,remark = #{remark}
		WHERE code = #{code}
	</update>
	
	<update id="update_collectTxSuccess" parameterType="collect">
		UPDATE
		tstd_collect
		SET
		tx_fee = #{txFee}
		,confirm_datetime = #{confirmDatetime}
		,status = #{status}
		,remark = #{remark}
		WHERE code = #{code}
	</update>

</mapper>